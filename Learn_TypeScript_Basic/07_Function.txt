****************************************************************************************************
1. Functions:

- 1.1. Parameter Type Annotations:
    + When you declare a function, you can add type annotations after each parameter to
    declare what types of parameters the function accepts.
    + Parameter type annotations go after the parameter name.
    + For example:
        function greet(name: string) {
        }


- 1.2. Return Type Annotations:
    + You can add return type annotations after the parameter list.
    + If you don't give a return type annotation, TypeScript will infer the
    function's return type based on its 'return' statements.
    + For example:
        function getNumber(): number {
            return 30;
        }


- 1.3. Optional parameter:
    + To declare an optional parameter, use the question mark (?) at the end of the parameter name.
    + For example:
        function getLength(numberList?: number[]): number {
        }


- 1.4. Function overloads:
    + Some functions can be called in a variety of argument counts and types.
    + We can specify a function that can be called in different ways by writing overload signatures.


- 1.5. Parameter destructuring:
    + For example (1):
        function createUser(userData: { id: number, name: string }) {
            const { id, name } = userData;
            // ...
        }
        createUser({ id: 1, name: 'Linh' });
    
    + For example (2):
        interface User {
            id: number;
            name: string;
        }
        function createUser({ id, name }: User) {
            // ...
        }
        createUser({ id: 1, name: 'Linh' } as User);
